{"meta":{"title":"SeeFly的博客","subtitle":"","description":"","author":"SeeFly","url":"https://itwangmingfei.github.io","root":"/"},"pages":[{"title":"标签","date":"2020-05-09T13:30:38.000Z","updated":"2020-05-09T13:31:16.100Z","comments":false,"path":"tags/index.html","permalink":"https://itwangmingfei.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-09T12:19:55.586Z","updated":"2020-05-09T11:05:34.561Z","comments":true,"path":"links/index.html","permalink":"https://itwangmingfei.github.io/links/index.html","excerpt":"","text":""},{"title":"书单","date":"2020-05-09T12:19:55.607Z","updated":"2020-05-09T11:05:34.561Z","comments":false,"path":"books/index.html","permalink":"https://itwangmingfei.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-12T12:24:28.000Z","updated":"2020-05-12T12:31:39.427Z","comments":false,"path":"about/index.html","permalink":"https://itwangmingfei.github.io/about/index.html","excerpt":"","text":"123456789101112131415161718192021222324&#123; name: 'Mingfei' age: 30, gender: '男', profession: 'PHP &amp; GO Engineer', experience: '7年', address: '山东省临沂市', education: '大专', github: 'https://github.com/itwangmingfei', blog: 'https://itwangmingfei.github.io', email: '25272850@qq.com', skills: [ ['PHP','GO'], ['Html', 'Javascript', 'jQuery'], ['Git', 'SVN'], ], devTools: [ ['Sublime Text', 'Visual Studio Code', 'Notepad++'], ['SourceTree', 'TortoiseSVN'], ['Navicat'], ] &#125;"},{"title":"404 Not Found：该页无法显示","date":"2020-05-09T12:19:55.634Z","updated":"2020-05-09T11:05:34.560Z","comments":false,"path":"/404.html","permalink":"https://itwangmingfei.github.io/404.html","excerpt":"","text":""},{"title":"分类","date":"2020-05-09T12:19:55.598Z","updated":"2020-05-09T11:05:34.561Z","comments":false,"path":"categories/index.html","permalink":"https://itwangmingfei.github.io/categories/index.html","excerpt":"","text":""},{"title":"GIT项目","date":"2020-05-09T13:27:01.000Z","updated":"2020-05-09T13:27:03.660Z","comments":false,"path":"repository/index.html","permalink":"https://itwangmingfei.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"go-maze","slug":"go-maze","date":"2020-05-26T08:06:00.000Z","updated":"2020-05-26T08:08:12.879Z","comments":true,"path":"2020/05/26/go-maze/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/26/go-maze/","excerpt":"","text":"原理读取文件内容注意 \\n 换行符12345678910111213141516171819202122232425func readmaze(filename string) [][]int &#123; //读取配置文件 file, err := os.Open(filename) if err != nil &#123; panic(err) &#125; defer file.Close() //读取数据 行列 var row, col int fmt.Fscanf(file, \"%d %d \\n\", &amp;row, &amp;col) fmt.Println(row, col) maze := make([][]int, row) for i := range maze &#123; maze[i] = make([]int, col) for j := range maze[i] &#123; //最后一个位置将换行符提取 if j == col-1 &#123; fmt.Fscanf(file, \"%d\\n\", &amp;maze[i][j]) &#125; else &#123; fmt.Fscanf(file, \"%d\", &amp;maze[i][j]) &#125; &#125; &#125; return maze&#125; 1234560 1 0 1 10 0 0 0 00 1 1 0 10 1 1 0 11 1 0 0 10 1 0 0 0 定义一个空的锚点结构1234560 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 定义锚点 和 一个上左下右的锚点结构12345678//设置 点结构type setPoint struct &#123; i, j int&#125;//定义4个移动方向 上 左 下 右var goPoint = []setPoint&#123;&#123;-1,0&#125;,&#123;0,-1&#125;,&#123;1,0&#125;,&#123;0,1&#125;,&#125; 移动 和 判断点是否超界1234567891011121314151617//移动func (p setPoint) add(pt setPoint) setPoint &#123; return setPoint&#123;p.i + pt.i, p.j + pt.j&#125;&#125;//判断点func (p setPoint) at(maze [][]int) (int, bool) &#123; if p.i &lt; 0 || p.i &gt;= len(maze) &#123; return 0, false &#125; if p.j &lt; 0 || p.j &gt;= len(maze[p.i]) &#123; return 0, false &#125; return maze[p.i][p.j], true&#125; 执行移动函数123456789101112131415161718192021222324252627282930313233343536373839404142434445func Gowalk(maze [][]int, start, end setPoint) [][]int &#123; //定义可视化抹点 6行5列 都是 0 的 steps := make([][]int, len(maze)) for i := range steps &#123; steps[i] = make([]int, len(maze[i])) &#125; //end //设置一个队列开始的起点 0，0 Q := []setPoint&#123;start&#125; for len(Q) &gt; 0 &#123; //获取第一个对象 cur := Q[0] //剔除第一个对象 Q = Q[1:] //如果获取的对象是最后出口锚点，跳出循环 if cur == end &#123; break &#125; //如果不是出口，对其进行上左下右移动 for _, onepoint := range goPoint &#123; //获取移动的4个点 next := cur.add(onepoint) val, ok := next.at(maze) //是否遇到墙 if !ok || val == 1 &#123; continue &#125; //去掉访问过的点和超界的点 val, ok = next.at(steps) if !ok || val != 0 &#123; continue &#125; //是否到开始的一个点 if next == start &#123; continue &#125; //异常点清除后，获取当前的可显示的点的值 curStems, _ := cur.at(steps) steps[next.i][next.j] = curStems + 1 Q = append(Q, next) &#125; &#125; return steps&#125; main.go调用函数1234567891011func main() &#123; maze := readmaze(\"maze.in\") //起点0，0 终点 len(maze),len(maze[0]) steps := Gowalk(maze, setPoint&#123;0, 0&#125;, setPoint&#123;len(maze), len(maze[0])&#125;) for _, row := range steps &#123; for _, val := range row &#123; fmt.Printf(\"%2d\", val) &#125; fmt.Println() &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"Go-maze","slug":"Go-maze","permalink":"https://itwangmingfei.github.io/tags/Go-maze/"}],"author":"SeeFly"},{"title":"rabbitMQ -go","slug":"rabbitMQ-go","date":"2020-05-24T13:21:00.000Z","updated":"2020-05-24T13:37:47.785Z","comments":true,"path":"2020/05/24/rabbitMQ-go/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/24/rabbitMQ-go/","excerpt":"","text":"GO获取rabbitMQgo get github.com/streadway/amqp1、创建连接123conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")failOnError(err, \"Failed to connect to RabbitMQ\")defer conn.Close() 2、创建管道123ch, err := conn.Channel()failOnError(err,\"Failed to open a channel\")defer ch.Close() 3、创建queueDeclare这一步相当于设定一个key 设置一个queue的key123456789q,err := ch.QueueDeclare( \"queue\", true, false, false, false, nil, )failOnError(err,\"Failed To declare a queue\") 4、存值调用12345body := `定义value值将值push到rabbitmq中`err = ch.Publish(\"\",q.Name,false,false,amqp.Publishing&#123; ContentType: \"texp/plain\", Body: []byte(body),&#125;) 5、取值调用123456789101112131415161718msgs, err := ch.Consume( q.Name, // queue \"\", // consumer true, // auto-ack false, // exclusive false, // no-local false, // no-wait nil, // args)failOnError(err, \"Failed to register a consumer\")forever := make(chan bool)go func() &#123; for d := range msgs &#123; log.Printf(\"Received a message: %s\", d.Body) &#125;&#125;()log.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")&lt;-forever 6、task_work存值1234567891011err = ch.Publish( \"\", q.Name, false, false, amqp.Publishing&#123; ContentType: \"text/plain\", DeliveryMode: amqp.Persistent, Body: []byte(body), &#125;, ) 7、work取值 可这只多个worker执行task队列1234567891011121314151617181920212223242526err = ch.Qos( 1, 0, false,)failOnError(err,\"Failed to Set Qos\")msgs, err := ch.Consume( q.Name, // queue \"\", // consumer false, // auto-ack false, // exclusive false, // no-local false, // no-wait nil, // args)failOnError(err,\"Failed to regster a consumer\")forever:= make(chan bool)go func() &#123; for d := range msgs &#123; log.Printf(\"Received a message: %s\", d.Body) dot_count := bytes.Count(d.Body, []byte(\".\")) t := time.Duration(dot_count) time.Sleep(t * time.Second) d.Ack(false) &#125;&#125;()","categories":[{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"https://itwangmingfei.github.io/categories/rabbitMQ/"},{"name":"go","slug":"rabbitMQ/go","permalink":"https://itwangmingfei.github.io/categories/rabbitMQ/go/"}],"tags":[{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"https://itwangmingfei.github.io/tags/rabbitMQ/"}],"author":"SeeFly"},{"title":"rabbitMQ","slug":"rabbitMQ","date":"2020-05-24T13:16:00.000Z","updated":"2020-05-24T13:21:02.640Z","comments":true,"path":"2020/05/24/rabbitMQ/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/24/rabbitMQ/","excerpt":"","text":"rabbitMQrabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。1、安装Erlang下载地址：https://www.erlang.org/downloads， 设置环境变量 修改环境变量path，增加Erlang变量至path，%ERLANG_HOME%\\bin; 打开cmd命令框，输入erl2、安装rabbitmq下载地址：http://www.rabbitmq.com/download.html 修改环境变量path，增加rabbitmq变量至path，%RABBITMQ_SERVER%\\sbin; 打开cmd命令框，切换\\sbin目录下，输入rabbitmqctl status3、安装插件rabbitmq-plugins.bat enable rabbitmq_management4、访问http://localhost:15672","categories":[{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"https://itwangmingfei.github.io/categories/rabbitMQ/"}],"tags":[{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"https://itwangmingfei.github.io/tags/rabbitMQ/"}],"author":"SeeFly"},{"title":"Yii2.0demo","slug":"Yii2-0demo","date":"2020-05-19T14:19:00.000Z","updated":"2020-05-19T14:25:16.585Z","comments":true,"path":"2020/05/19/Yii2-0demo/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/19/Yii2-0demo/","excerpt":"","text":"https://github.com/itwangmingfei/YII-demo多表连接 控制器不支持hasmany hasone直接定义在model中12345678//Models 关联一个表，对应一个 hasone Content::className() 存在或创建一个Models Content； public function getcontent()&#123; return $this-&gt;hasOne(Content::className(),[\"id\"=&gt;\"cid\"]); &#125;//关联一个表对应多条数据 hasMany public function getnovel()&#123; return $this-&gt;hasMany(Novels::className(),['cid'=&gt;'id']); &#125; 控制器调用12345678910111213141516171819202122232425 //index.php?r=adminquery/list public function actionList()&#123; $content = Content::find(2)-&gt;with('novel')-&gt;asarray()-&gt;one(); echo \"&lt;pre&gt;\"; var_dump($content); &#125; //index.php?r=adminquery/novels public function actionNovels()&#123; $novel = Novels::find()-&gt;where(['cid'=&gt;3])-&gt;with('content')-&gt;asarray()-&gt;all(); echo \"&lt;pre&gt;\"; var_dump($novel); &#125;//index.php?r=adminquery/info public function actionInfo()&#123; $sql = \"select * from content where id=:id\"; $res = Content::findbysql($sql,[\":id\"=&gt;3])-&gt;one(); echo \"&lt;pre&gt;\"; var_dump($res); &#125; 原生操作123456789//index.php?r=adminquery/infopublic function actionInfo()&#123; $sql = \"select * from content where id=:id\"; $res = Content::findbysql($sql,[\":id\"=&gt;3])-&gt;one(); echo \"&lt;pre&gt;\"; var_dump($res);&#125; 基本增删改查12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;?phpnamespace app\\controllers;use \\yii\\base\\Controller;use Yii;use app\\models\\Content;class AdminController extends Controller&#123; /* @组件接收 $Request = Yii::$app-&gt;request; @get传值并验证是否是get请求 @params id @index.php?r=admin/get&amp;id=50 */ public function actionGet()&#123; $Request = Yii::$app-&gt;request; $id = $Request-&gt;get('id'); if (!$Request-&gt;isget)&#123; echo \"只接受get请求\"; return; &#125; if($id != null)&#123; //执行输出或操作 echo \"get id \". $id; &#125;else&#123; echo \"not get file params: id \"; &#125; &#125; /*@post传值并验证是否是post请求 */ public function actionPost()&#123; $Request = Yii::$app-&gt;request; if (!$Request-&gt;ispost)&#123; echo \"只接受POST请求\"; return; &#125; $id = $Request-&gt;post('id'); if($id !=null)&#123; //执行输出或操作 echo \"POST id \". $id; &#125;else&#123; echo \"not post file params: id \"; &#125; &#125; /*@List */ public function actionList()&#123; $model = Content::find(); $total = $model-&gt;count(); $page = 1; $pagesize = 2; $offset = ($page-1)*$pagesize; $where = \"\"; $list = $model-&gt;where($where)-&gt;offset($offset)-&gt;limit($pagesize)-&gt;all(); var_dump($list); exit; &#125; /*@Add */ public function actionAdd()&#123; /*@添加数据 */ $model = new Content(); $model-&gt;title = \"ggllook\"; $model-&gt;contents = \"sdf\"; $model-&gt;uid = 2; $res = $model-&gt;save(); var_dump($res); &#125; /*@update */ public function actionUp()&#123; /*@修改数据 */ $model = Content::findOne(1); $model-&gt;title= \"wmf\"; $model-&gt;contents=\"出水电费\"; $res = $model-&gt;save(); var_dump($res); &#125; /*@info */ public function actionInfo()&#123; $row = Content::findOne(3); var_dump($row); echo \"info\"; &#125; /*@del */ public function actionDel()&#123; /*@删除 */ $model = Content::findOne(1); $model-&gt;delete(); echo \"list\"; &#125;&#125;","categories":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"},{"name":"Yii","slug":"php/Yii","permalink":"https://itwangmingfei.github.io/categories/php/Yii/"}],"tags":[{"name":"yii","slug":"yii","permalink":"https://itwangmingfei.github.io/tags/yii/"}],"author":"SeeFly"},{"title":"Yii2.0","slug":"Yii2-0-1","date":"2020-05-19T14:17:00.000Z","updated":"2020-05-19T14:25:02.740Z","comments":true,"path":"2020/05/19/Yii2-0-1/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/19/Yii2-0-1/","excerpt":"","text":"Yii安装 12php -r \"readfile('https://getcomposer.org/installer');\" | phpcomposer create-project --prefer-dist yiisoft/yii2-app-basic basic 请求方式 控制器+方法 index.php?r=adminquery/info adminquery 对应 adminqueryController info 对应 function actioninfo","categories":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"},{"name":"Yii","slug":"php/Yii","permalink":"https://itwangmingfei.github.io/categories/php/Yii/"}],"tags":[{"name":"yii","slug":"yii","permalink":"https://itwangmingfei.github.io/tags/yii/"}],"author":"SeeFly"},{"title":"thinkphp安装","slug":"thinkphp安装","date":"2020-05-17T14:26:00.000Z","updated":"2020-05-19T14:27:48.855Z","comments":true,"path":"2020/05/17/thinkphp安装/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/17/thinkphp%E5%AE%89%E8%A3%85/","excerpt":"","text":"thinkphp5.0composer 安装1composer create-project topthink/think=5.0.* tp5 --prefer-dist git安装1git clone https://github.com/top-think/think tp5 然后切换到tp5目录下面，再克隆核心框架仓库：12git clone https://github.com/top-think/framework thinkphpgit checkout master 更新1git pull https://github.com/top-think/framework","categories":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"},{"name":"thinkphp","slug":"php/thinkphp","permalink":"https://itwangmingfei.github.io/categories/php/thinkphp/"}],"tags":[{"name":"thinkphp","slug":"thinkphp","permalink":"https://itwangmingfei.github.io/tags/thinkphp/"}],"author":"SeeFly"},{"title":"Thinkphp5.0","slug":"Thinkphp5-0-1","date":"2020-05-17T13:43:00.000Z","updated":"2020-05-19T14:26:49.156Z","comments":true,"path":"2020/05/17/Thinkphp5-0-1/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/17/Thinkphp5-0-1/","excerpt":"","text":"路由route.php12345678910111213141516171819202122232425262728&lt;?php// +----------------------------------------------------------------------// | ThinkPHP [ WE CAN DO IT JUST THINK ]// +----------------------------------------------------------------------// | Copyright (c) 2006~2018 http://thinkphp.cn All rights reserved.// +----------------------------------------------------------------------// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )// +----------------------------------------------------------------------// | Author: liu21st &lt;liu21st@gmail.com&gt;// +----------------------------------------------------------------------use think\\Route;//模型操作Route::get('Add','index/User/Add');Route::get('Del/:id','index/User/Del');Route::get('Update','index/User/Update');Route::get('Info/:id','index/User/Info');Route::get('List','index/User/List');//模型验证validateRoute::get('Validate','index/User/Validatetext');//参数validatereturn [ '__pattern__' =&gt; [ 'name' =&gt; '\\w+', 'id' =&gt; '\\d+', ],]; 控制器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;?phpnamespace app\\index\\controller;use think\\Controller;use app\\index\\model\\User as UserModel;use app\\index\\validate\\User as validateuser;class User extends Controller&#123; /*@validate验证 */ public function Validatetext()&#123; $data = array( 'name' =&gt;\"Seefly\", 'email' =&gt;\"qqqqqqqq@qq.com\", 'phone' =&gt;\"17353953434\", 'number' =&gt;\"4545\", 'nums' =&gt;22, ); $validate = new validateuser; if(!$validate-&gt;check($data))&#123; dump($validate-&gt;getError()); &#125;else&#123; echo \"验证通过\"; &#125; return ; &#125; /* @添加 @聚合模型 */ public function Add()&#123; $usermodel = new UserModel; $usermodel-&gt;name =\"我的世界\"; $usermodel-&gt;password =\"123123\"; $usermodel-&gt;email =\"qq@qq.com\"; $usermodel-&gt;message =\"我的世界\"; //关联表字段profile $usermodel-&gt;profile=\"text\"; $usermodel-&gt;save(); echo $usermodel-&gt;id; &#125; /*@删除ID*/ public function Del()&#123; $id = input('id'); if(empty($id))&#123; return \"参数异常！\"; &#125; $usermodel = UserModel::get($id); if(!empty($usermodel))&#123; dump($usermodel-&gt;delete()); &#125;else&#123; return \"数据以删除\"; &#125; &#125; /*@修改 */ public function Update()&#123; $id = 2; $usermodel = UserModel::get($id); $usermodel-&gt;name =\"Seefly\"; $usermodel-&gt;password =\"123123\"; $usermodel-&gt;email =\"Seefly@qq.com\"; $usermodel-&gt;message =\"Seefly\"; //关联表字段profile $usermodel-&gt;profile =\"Seefly\"; $usermodel-&gt;save(); return $usermodel-&gt;id; &#125; /*@一条数据 */ public function Info()&#123; $id = input('id'); $usermodel = UserModel::get($id); //$usermodel = UserModel::get([\"name\"=&gt;\"Seefly\"]); return $usermodel; &#125; /*@获取数据 */ public function List()&#123; dump(Request()-&gt;isget()); $page = 1; $pagesize = 3; $offset = ($page-1)*$page; $usermodel = new UserModel; $where = \"\"; $list = $usermodel-&gt;where($where)-&gt;limit($offset,$pagesize)-&gt;select(); foreach($list as $key=&gt;$val)&#123; dump($key.$val); &#125; &#125;&#125; 控制器原生和内构造器1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?phpnamespace app\\index\\controller;use think\\Controller;use think\\Db;/*@原生语句@构造器构造器语句@构造器class Userquery extends Controller&#123; public function Add()&#123; /*原生sql */ $sql = \"insert into user (`name`,`email`,`message`) values('nginx','nginx@qq.com','nginx')\"; $res = Db::execute($sql); /*think 构造器 */ $user = Db::name('user'); $data = array(\"name\"=&gt;\"php\",\"email\"=&gt;\"php@qq.com\",\"message\"=&gt;\"php\"); $res = $user-&gt;insert($data); return $res; &#125; public function Update()&#123; /*原生sql */ $sql = \"update user set `name`='GG' where `id` = 29\"; $res = Db::execute($sql); /*think 构造器 */ $user = Db::name('user'); $data = array(\"name\"=&gt;\"php111\",\"email\"=&gt;\"php1@qq.com\",\"message\"=&gt;\"php1\"); $where = array(\"id\"=&gt;\"29\"); $user-&gt;where($where)-&gt;update($data); return $res; &#125; public function Del()&#123; /*原生sql */ $sql = \"delete from user where `id` = 28\"; //$res = Db::execute($sql); /*think 构造器 */ $user = Db::name('user'); $where = array(\"id\"=&gt;\"18\"); $res = $user-&gt;where($where)-&gt;delete(); return $res; &#125; public function Info()&#123; $sql = \"select * from user where `id` = 27\"; //$res = Db::query($sql); /*think 构造器 */ $user = Db::name('user'); $where = array(\"id\"=&gt;array(\"eq\",\"27\")); $res = $user-&gt;where($where)-&gt;find(); dump($res); &#125; public function List()&#123; dump(Request()-&gt;isget()); $sql = \"select * from user order by id desc limit 0,10\"; //$res = Db::query($sql); /*think 构造器 */ $user = Db::name('user'); $where = array('id'=&gt;array('egt','30')); $res = $user-&gt;where($where)-&gt;order(\"id desc\")-&gt;limit(0,5)-&gt;select(); dump($res); &#125; /*@表连接 */ public function JoinList()&#123; dump(Request()-&gt;isget()); $sql = \"select a.id,p.id,a.name,a.email,p.profile from user as a join profile as p on a.id = p.uid order by a.id desc limit 0,10\"; //$res = Db::query($sql); /*think 构造器 */ $user = Db::name('user as a'); $where = array('a.id'=&gt;array('egt','30')); $res = $user-&gt;join('profile as b','a.id=p.uid','left')-&gt;where($where)-&gt;order('a.id desc')-&gt;limit(0,5)-&gt;select(); dump($res); &#125;&#125; Model定义1234567891011121314151617181920&lt;?phpnamespace app\\index\\model;use think\\model\\Merge;class User extends Merge&#123; // 设置主表名 protected $table = 'user'; // 定义关联模型列表 protected $relationModel = [ // 给关联模型设置数据表 'Profile' =&gt; 'profile', ]; // 定义关联外键 protected $fk = 'uid'; protected $mapFields = [ // 为混淆字段定义映射 'id' =&gt; 'User.id', 'profile_id' =&gt; 'Profile.id', ];&#125; validate定义使用1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?phpnamespace app\\index\\validate;use think\\Validate;use think\\Db;/*@validate校验规则*/class User extends Validate&#123; protected $rule = [ ['name','require|max:25|boolName','姓名不能为空|姓名最大长度不能超过25|名称已存在'], ['email','email','邮箱格式错误'], ['phone','isMobile','手机格式错误'], ['number','require|number|max:25','number不能为空|数字类型|最大长度25'], ['nums','isNums','不是22'], ]; /* @自定义校验规则 */ /*校验这个nums只能是22的 */ protected function isNums($val)&#123; if($val==22)&#123; return true; &#125; return false; &#125; /*校验手机号 */ protected function isMobile($val) &#123; $rule = '^1(3|4|5|7|8)[0-9]\\d&#123;8&#125;$^'; $result = preg_match($rule, $val); if ($result) &#123; return true; &#125; else &#123; return false; &#125; &#125; /*@校验数据库中是否存在 */ protected function boolName($val)&#123; $total = Db::name('user')-&gt;where(\"name\",$val)-&gt;count(); if ($total&gt;0)&#123; return false; &#125; return true; &#125;&#125;","categories":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"},{"name":"thinkphp","slug":"php/thinkphp","permalink":"https://itwangmingfei.github.io/categories/php/thinkphp/"}],"tags":[{"name":"thinkphp","slug":"thinkphp","permalink":"https://itwangmingfei.github.io/tags/thinkphp/"}],"author":"SeeFly"},{"title":"Gocolly爬虫","slug":"Gocolly爬虫","date":"2020-05-15T13:56:51.000Z","updated":"2020-05-15T14:13:20.968Z","comments":true,"path":"2020/05/15/Gocolly爬虫/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/15/Gocolly%E7%88%AC%E8%99%AB/","excerpt":"","text":"gocolly 爬虫1go get -u github.com/gocolly/colly/v2/... colly框架依赖goquery库，goquery将jQuery的语法和特性引入到了go语言中。如果要灵活自如地采集数据，首先要了解jQuery选择器参考别人整理的信息比较全https://www.cnblogs.com/majianguo/p/8146130.html 官方例子1234567891011121314func main() &#123; c := colly.NewCollector() // Find and visit all links c.OnHTML(\"a[href]\", func(e *colly.HTMLElement) &#123; e.Request.Visit(e.Attr(\"href\")) &#125;) c.OnRequest(func(r *colly.Request) &#123; fmt.Println(\"Visiting\", r.URL) &#125;) c.Visit(\"http://go-colly.org/\")&#125; 写个Demo，采集七猫小说，查找页面书库的链接，只要获取到存入redis，验证redis是否存储过url，然后无限循环获取书库链接里面的标题等数据。。。控制器 https://github.com/itwangmingfei/Gin-go-demo/blob/master/controllers/gocoll.goRedis https://github.com/itwangmingfei/Gin-go-demo/blob/master/tools/redis.go123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146/*@爬取七猫小说网*/func (g Gocoll) get(c *gin.Context)&#123; dlink :=\"https://www.qimao.com\" cfg := config.GetConfig() var novel models.Novel var clientredis tools.GoRedis //********************************* coll := colly.NewCollector( colly.AllowedDomains(\"www.qimao.com\"), colly.Async(true), colly.UserAgent(\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"), ) ///这个地方是配置redis存储请求返回的数据信息吧？ storage := &amp;redisstorage.Storage&#123; Address: fmt.Sprintf(\"%s:%s\", cfg.Redis.Host,cfg.Redis.Port), Password:cfg.Redis.Passwd, DB: cfg.Redis.Db, Prefix : \"HTTP_QIMAO\", &#125; if err := coll.SetStorage(storage);err!=nil&#123; panic(err) &#125; if err:=storage.Clear();err!=nil&#123; log.Fatal(err) &#125; //defer storage.Client.Close() //*---------------------------------------------- q,_ :=queue.New(2,storage) /*&lt;h2 class=\"tit\"&gt;????&lt;/h2&gt;*/ /*获取样式 div.data-txt 模块下的数据信息*/ coll.OnHTML(`div.data-txt`, func(e *colly.HTMLElement) &#123; ls,_ := e.DOM.Html() //标题 tit := e.ChildText(\"h2.tit\") //作者 pname := e.ChildText(`p.p-name a`) //状态 status := e.ChildText(`span.qm-tags.black.clearfix em:first-child`) nums := e.ChildText(`p.p-num span:nth-child(1)`) nums1 := e.ChildText(`p.p-num span:nth-child(3)`) nums2 := e.ChildText(`p.p-num span:nth-child(5)`) //没有标签正则一下 reg := regexp.MustCompile(`&lt;em&gt;主角：&lt;/em&gt;(.*?)&lt;`) regstr := reg.FindAllStringSubmatch(ls,-1) uptime := e.ChildText(`p.p-update em.time`) newpage :=e.ChildText(`p.p-update a`) if len(tit)&gt;0 &#123; novel.Title = tit fmt.Printf(\"名称：%s \\n\",tit) &#125; if len(regstr) &gt;0 &#123; novel.Mster = regstr[0][1] fmt.Printf(\"主角：%s \\n\",regstr[0][1]) &#125; if len(pname) &gt;0 &#123; fmt.Printf(\"作者：%s \\n\",pname) novel.Author = pname &#125; if len(status) &gt;0 &#123; fmt.Printf(\"状态：%s \\n\",status) novel.Status = status &#125; if len(nums)&gt;0&#123; fmt.Printf(\"数量：%s %s %s \\n\",nums,nums1,nums2) novel.Show = nums+nums1+nums2 &#125; if len(uptime)&gt;0&#123; fmt.Printf(\"更新时间：%s \\n\",uptime) novel.Uptime =uptime &#125; if len(newpage)&gt;0&#123; fmt.Printf(\"最新章节：%s \\n\",newpage) novel.Newpage = newpage &#125; models.GetDb().Create(&amp;novel) &#125;) //获取url coll.OnHTML(`a[href]`,func(e *colly.HTMLElement)&#123; link := e.Attr(\"href\") //正则匹配书库 reg := regexp.MustCompile(`^(/shuku/[1-9]&#123;6&#125;/)`) res := reg.FindAllString(link,-1) //存在返回数据 if len(res)&gt;0&#123; //存入redis中 newLink := dlink +link //判断执行存储的redis中是否存在如果存在不存储当前url Isset := clientredis.ToIsset(newLink) //如果不存在继续抓取当前链接 if !Isset&#123; //连接存入redis中 log.Println(newLink) err := clientredis.DoLpush(newLink) if err!=nil&#123; log.Println(err) &#125; &#125; &#125; &#125;) coll.OnRequest(func(r *colly.Request) &#123; fmt.Println(\"Visiting\", r.URL.String()) &#125;) coll.OnScraped(func(r *colly.Response) &#123; fmt.Println(\"Finished\", r.Request.URL) &#125;) //获取这个应该是配饰redisstorage使用 用于接收返回数据然后存储 coll.OnResponse(func(r *colly.Response) &#123; log.Println(coll.Cookies(r.Request.URL.String())) &#125;) novel.Url = dlink q.AddURL(dlink) q.Run(coll) for &#123; /* @获取新的链接 */ dlink,_ := clientredis.DoRpop() if len(dlink)!=0&#123; novel.Url = dlink q.AddURL(dlink) q.Run(coll) time.Sleep(time.Second*2) &#125; &#125;&#125; Redis 定义12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273package toolsimport ( \"fmt\" \"gin/config\" \"github.com/monnand/goredis\" log \"github.com/sirupsen/logrus\")type GoRedis struct &#123; *goredis.Client&#125;var Client GoRedisconst ( DO_QUEUE = \"DoQueue\" //记录需要执行的数据 TO_QUEUE = \"Toqueue\" //处理过的数据放这里)//链接redisfunc InitRedis(cfg config.Redis) &#123; var cliect goredis.Client cliect.Addr = fmt.Sprintf(\"%s:%s\", cfg.Host, cfg.Port) cliect.Password = cfg.Passwd cliect.Db = cfg.Db pong, err := cliect.Ping() if err != nil &#123; log.Fatalf(\"cant ping redis %s\\n\", err.Error()) &#125; Client = GoRedis&#123;&amp;cliect&#125; log.Println(\"ping redis:\", pong)&#125;//存入数据头部存入数据func (r GoRedis) DoLpush(value string) error &#123; err := Client.Lpush(DO_QUEUE, []byte(value)) if err != nil &#123; log.Println(err) return err &#125; return nil&#125;//读取数据尾部获取数据func (r GoRedis) DoRpop() (string, error) &#123; val, err := Client.Rpop(DO_QUEUE) if err != nil &#123; return \"\", err &#125; return string(val), err&#125;//获取当前key存入的数量func (r GoRedis) DoLen() int &#123; nums, err := Client.Llen(DO_QUEUE) if err != nil &#123; return 0 &#125; return nums&#125;//存入集合中------------------------------------func (r GoRedis) ToSadd(value string) bool &#123; res, _ := Client.Sadd(TO_QUEUE, []byte(value)) return res&#125;//获取当前value是否需要存func (r GoRedis) ToIsset(value string) bool &#123; res, _ := Client.Sismember(TO_QUEUE, []byte(value)) return res&#125;","categories":[],"tags":[],"author":"SeeFly"},{"title":"Jwt-go创建Token验证Token","slug":"Jwt-go","date":"2020-05-14T12:55:00.000Z","updated":"2020-05-14T13:05:14.074Z","comments":true,"path":"2020/05/14/Jwt-go/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/14/Jwt-go/","excerpt":"","text":"token 设置1go get github.com/dgrijalva/jwt-go 设置jwt 函数12345678910111213141516171819202122232425262728293031323334353637383940414243444546package commonimport ( \"demoGin/model\" \"github.com/dgrijalva/jwt-go\" \"time\")var jwtkey = []byte(\"jwttoken\")var myconnecttoken = \"token:mytoken\"type jwtModel struct &#123; UserId uint jwt.StandardClaims&#125;/*@设置token jwt*/func ReleaseToken(user model.User)(string,error) &#123; outtime :=time.Now().Add(7*24*time.Hour) jwtclaims :=jwtModel&#123; UserId: user.ID, StandardClaims: jwt.StandardClaims&#123; ExpiresAt:outtime.Unix(), IssuedAt:time.Now().Unix(), Subject:myconnecttoken, &#125;, &#125; token :=jwt.NewWithClaims(jwt.SigningMethodHS256,jwtclaims) tokenStrng,err :=token.SignedString(jwtkey) if err !=nil&#123; return \"\",err &#125; return tokenStrng,err&#125;/*@解析token*/func ParseToken(tokenString string)(*jwt.Token, *jwtModel,error)&#123; jwtClaims := &amp;jwtModel&#123;&#125; token,err :=jwt.ParseWithClaims(tokenString,jwtClaims, func(token *jwt.Token) (i interface&#123;&#125;, e error) &#123; return jwtkey,nil &#125;) return token,jwtClaims,err&#125; 中间件处理使用jwt-go123456789101112131415161718192021222324/*@接收token*/tokenString := ctx.GetHeader(\"Authorization\")/*@token中会默认加上Bearer 和空格这七个字节*/if tokenString ==\"\" || !strings.HasPrefix(tokenString,\"Bearer \")&#123; response.Respose(ctx,http.StatusUnprocessableEntity,422,nil,\"权限不足1\") ctx.Abort() return&#125;tokenString = tokenString[7:]/*@解析token*/token,claims,err :=common.ParseToken(tokenString)if err != nil&#123; response.Respose(ctx,http.StatusUnprocessableEntity,422,nil,\"权限不足2\") ctx.Abort() return&#125;","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"jwt-go","slug":"jwt-go","permalink":"https://itwangmingfei.github.io/tags/jwt-go/"}],"author":"SeeFly"},{"title":"Gin-gorm-validate","slug":"Gin-gorm-validate","date":"2020-05-14T12:45:00.000Z","updated":"2020-05-14T12:48:35.148Z","comments":true,"path":"2020/05/14/Gin-gorm-validate/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/14/Gin-gorm-validate/","excerpt":"","text":"gorm 数据库模型 validate验证数据123github.com/go-sql-driver/mysqlgithub.com/gin-gonic/gingithub.com/gookit/validate demo地址https://github.com/itwangmingfei/Gin-go-demo","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"gin","slug":"gin","permalink":"https://itwangmingfei.github.io/tags/gin/"}],"author":"SeeFly"},{"title":"Gin-controller","slug":"Gin-controller","date":"2020-05-14T12:39:00.000Z","updated":"2020-05-14T12:43:25.538Z","comments":true,"path":"2020/05/14/Gin-controller/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/14/Gin-controller/","excerpt":"","text":"定义一个带路由控制的控制器和公共函数1234567891011121314151617181920212223242526272829303132333435363738394041424344package controllersimport ( &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot; log &quot;github.com&#x2F;sirupsen&#x2F;logrus&quot; &quot;strconv&quot; &quot;strings&quot;)&#x2F;&#x2F;定义路由func Init(r *gin.Engine) &#123; initUserRouteAr(r)&#125;&#x2F;*@ 设置page*&#x2F;func GetPage(c *gin.Context) int&#123; page :&#x3D; 1 _p :&#x3D; strings.TrimSpace(c.Query(&quot;page&quot;)) log.Infof(&quot;page : %s&quot;, _p) if _p !&#x3D; &quot;&quot; &#123; _converted, err :&#x3D; strconv.Atoi(_p) if err &#x3D;&#x3D; nil &amp;&amp; _converted &gt; 0 &#123; page &#x3D; _converted &#125; &#125; return page&#125;&#x2F;*@ 设置pagesize*&#x2F;func GetPagesize(c *gin.Context) int&#123; pagesize :&#x3D; 10 _p :&#x3D; strings.TrimSpace(c.Query(&quot;pagesize&quot;)) log.Infof(&quot;pagesize :%s&quot;, _p) if _p !&#x3D; &quot;&quot; &#123; _converted, err :&#x3D; strconv.Atoi(_p) if err &#x3D;&#x3D; nil &amp;&amp; _converted &gt; 0 &#123; log.Errorf(&quot;err :%v&quot;, err) pagesize &#x3D; _converted &#125; &#125; return pagesize&#125; 处理控制器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116package controllersimport ( \"gin/forms\" \"gin/libservers\" \"gin/response\" \"github.com/gin-gonic/gin\" \"github.com/gookit/validate\" \"log\")//用户控制器type User struct &#123;&#125;/*@定义控制器路由*/func initUserRouteAr(r *gin.Engine) &#123; user := new(User) AppGroup := r.Group(\"/Member/v1\") AppGroup.GET(\"/list\", user.list) AppGroup.GET(\"/show/:id\", user.show) AppGroup.POST(\"/add\", user.add) AppGroup.POST(\"/update\", user.update) AppGroup.GET(\"/delete/:id\", user.delete)&#125;/*@获取列表信息params：pagesize page name*/func (u User) list(c *gin.Context)&#123; var lib libservers.User Pageindex := GetPage(c) lib.Pagesize = GetPagesize(c) lib.Offset = (Pageindex-1)*lib.Pagesize users := lib.GetList() if users == nil&#123; response.ShowFailed(c,nil,\"数据不存在！\") return &#125; response.ShowSucc(c,gin.H&#123;\"code\":200,\"data\":users&#125;,\"获取成功\")&#125;/*@添加用户params forms.User*/func (u User) add(c *gin.Context)&#123; var lib libservers.User var form forms.User err := c.BindJSON(&amp;form) if err != nil &#123; response.ShowFailed(c, nil, \"请求参数错误\"+\"发生错误:\"+err.Error()) return &#125; v := validate.Struct(form) if !v.Validate()&#123; response.ShowFailed(c, nil, \"请求参数错误:\"+v.Errors.One()) return &#125; lib.Add(form) response.ShowSucc(c,gin.H&#123;\"code\":200&#125;,\"添加成功！\")&#125;/*@查询一条数据params id*/func (u User) show(c *gin.Context)&#123; var lib libservers.User lib.Id = c.Param(\"id\") user,err := lib.Show() if err!=nil&#123; response.ShowFailed(c,nil,\"数据不存在！\") return &#125; response.ShowSucc(c,gin.H&#123;\"code\":200,\"data\":user&#125;,\"获取成功\")&#125;/*@删除数据params id*/func (u User) delete(c *gin.Context)&#123; var lib libservers.User lib.Id = c.Param(\"id\") res := lib.Del() if !res&#123; response.ShowFailed(c,nil,\"数据不存在！\") return &#125; response.ShowSucc(c,gin.H&#123;\"code\":200,\"state\":true&#125;,\"删除成功\")&#125;/*@修改数据params forms.UpUser*/func (u User) update(c *gin.Context)&#123; var lib libservers.User var form forms.UpUser err := c.BindJSON(&amp;form) if err != nil &#123; response.ShowFailed(c, nil, \"请求参数错误\"+\"发生错误:\"+err.Error()) return &#125; v := validate.Struct(form) if !v.Validate()&#123; response.ShowFailed(c, nil, \"请求参数错误:\"+v.Errors.One()) return &#125; lib.Id = form.Id log.Println(form) err = lib.Update(form) if err!=nil&#123; response.ShowFailed(c,nil,\"数据不存在\") return &#125; response.ShowSucc(c,gin.H&#123;\"code\":200,\"state\":true&#125;,\"修改成功\")&#125;","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"gin","slug":"gin","permalink":"https://itwangmingfei.github.io/tags/gin/"}],"author":"SeeFly"},{"title":"Gin-gorm","slug":"Gin-gorm","date":"2020-05-14T12:25:00.000Z","updated":"2020-05-14T12:37:46.182Z","comments":true,"path":"2020/05/14/Gin-gorm/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/14/Gin-gorm/","excerpt":"","text":"定义一个Model1234567891011121314151617package models//结构定义type User struct &#123; Id uint64 `gorm:\"primary_key;commit:'用户ID'\"` Name string `gorm:\"size:100;unique,not null;commit:'用户名'\"` Password string `gorm:\"size:100;unique,not null;commit:'密码'\"` Phone string `gorm:\"size:11;commit:'手机号'\"` Email string `gorm:\"size:100;index;commit:'Email'\"` State int `gorm:\"default:1;commit:'状态1正常0关闭'\" ` Message string `gorm:\"commit:'状态1正常0关闭'\" `&#125;//设置表名func (u User) TableName() string &#123; return \"user\"&#125; DB连接123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package modelsimport ( \"fmt\" \"gin/config\" _ \"github.com/go-sql-driver/mysql\" \"github.com/jinzhu/gorm\" log \"github.com/sirupsen/logrus\")var db *gorm.DBfunc InitDb(conf config.Mysql, debug bool) &#123; if db!=nil &#123; return &#125; dsn := fmt.Sprintf(\"%s:%s@(%s:%s)/%s?charset=utf8mb4&amp;parseTime=True&amp;loc=Local\", conf.User, conf.Passwd, conf.Host, conf.Port, conf.Db) var err error db, err = gorm.Open(\"mysql\", dsn) if err != nil &#123; log.Fatalf(\"can't connect to db : %s\\n\", err.Error()) &#125; err = db.DB().Ping() if err != nil &#123; log.Fatalf(\"can't ping db :%s\\n\", err.Error()) &#125; log.Println(\"ping mysql success!\") db.DB().SetMaxOpenConns(conf.MaxIdleConns) db.DB().SetMaxIdleConns(conf.MaxOpenConns) if debug &#123; db.LogMode(true) &#125;&#125;func GetDb() *gorm.DB &#123; return db&#125;func Save(value interface&#123;&#125;) error &#123; return db.Save(&amp;value).Error&#125;func Create(values interface&#123;&#125;) (err error) &#123; err = db.Create(values).Error return&#125;func Update(values interface&#123;&#125;) error &#123; return db.Update(&amp;values).Error&#125;func Updates(model interface&#123;&#125;, updates interface&#123;&#125;) (affectedRows int64, err error) &#123; result := db.Where(model).Updates(updates) affectedRows = result.RowsAffected err = result.Error log.Infof(\"Updates : affectedRows %d, err: %v\", affectedRows, err) return&#125; 自动创建表1models.GetDb().AutoMigrate(&amp;models.User&#123;&#125;,&amp;models.Content&#123;&#125;) 操作数据库增删改查123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899package libserversimport ( \"fmt\" \"gin/forms\" \"gin/models\" \"log\")type User struct &#123; Servers&#125;//可定义成一个全局的处理结构type Servers struct &#123; Id string Name string Pagesize int Offset int&#125;//获取分页的数据信息func(u User) GetList() []models.User &#123; DB := models.GetDb() var users []models.User u.Name = fmt.Sprintf(\"%%%s%%\",u.Name) DB.Where(\"name like ?\",u.Name).Limit(u.Pagesize).Offset(u.Offset).Order(\"id desc\").Find(&amp;users) log.Println(users) return users&#125;//添加func (u User) Add(form forms.User) (uint64, bool) &#123; DB := models.GetDb() var user models.User /**/ user.Name = form.Name user.Password = form.Password user.Email = form.Email user.Phone = form.Phone DB.Create(&amp;user) if user.Id == 0 &#123; return 0, false &#125; return user.Id, true&#125;/*@查询一条数据*/func (u User) Show() (models.User, error) &#123; DB := models.GetDb() var user models.User //查主键 err := DB.First(&amp;user, u.Id).Error //其他条件 //DB.Where(\"name = ?\",u.Name).First(&amp;user) if user.Id == 0 &#123; return user, err &#125; return user, nil&#125;/*@删除一条数据*/func (u User) Del() bool &#123; DB := models.GetDb() var user models.User //判断是否存在 user, err := u.Show() if err != nil &#123; return false &#125; err = DB.Delete(&amp;user).Error if err != nil &#123; return false &#125; return true&#125;/*@修改数据*/func (u User) Update(form forms.UpUser) error &#123; DB := models.GetDb() var user models.User user, err := u.Show() if err != nil &#123; return err &#125; user.Name = form.Name user.Phone = form.Phone user.Email = form.Email user.Message = form.Message err = DB.Model(&amp;user).Update(&amp;user).Error if err != nil &#123; return err &#125; return nil&#125;","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"gorm","slug":"gorm","permalink":"https://itwangmingfei.github.io/tags/gorm/"}],"author":"SeeFly"},{"title":"Gin-validate","slug":"Gin-validate","date":"2020-05-14T12:22:00.000Z","updated":"2020-05-14T12:24:30.270Z","comments":true,"path":"2020/05/14/Gin-validate/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/14/Gin-validate/","excerpt":"","text":"validate 使用1go get github.com/gookit/validate 定义demo1234567891011121314151617181920212223242526272829303132333435package formsimport \"github.com/gookit/validate\"type User struct &#123; Name string `json:\"name\" validate:\"required|minLen:4\" ` Password string `json:\"password\" validate:\"required|minLen:6\"` Phone string `json:\"phone\" validate:\"required|cnMobile\"` Email string `json:\"email\" validate:\"required|email\"`&#125;type UpUser struct &#123; Id string `json:\"id\" validate:\"required\"` Name string `json:\"name\" validate:\"required|minLen:4\" ` Password string `json:\"password\" validate:\"required|minLen:6\"` Phone string `json:\"phone\" validate:\"cnMobile\"` Email string `json:\"email\" validate:\"email\"` Message string `json:\"message\"`&#125;// Messages 您可以自定义验证器错误消息func (f User) Messages() map[string]string &#123; return validate.MS&#123; \"required\": \"&#123;field&#125;不能为空\", &#125;&#125;// Translates 你可以自定义字段翻译func (p User) Translates() map[string]string &#123; return validate.MS&#123; \"Name\": \"姓名\", \"Password\": \"密码\", \"Phone\": \"手机号\", \"Email\": \"邮箱\", &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"Validate","slug":"Validate","permalink":"https://itwangmingfei.github.io/tags/Validate/"}],"author":"SeeFly"},{"title":"go基本三大类型","slug":"go基本类型","date":"2020-05-13T13:03:00.000Z","updated":"2020-05-16T13:18:40.481Z","comments":true,"path":"2020/05/13/go基本类型/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/13/go%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"go中值类型、引用类型、指针类型go语言中的值类型：123int、float、bool、array、sturct等 值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数 声明一个值类型变量时，编译器会在栈中分配一个空间，空间里存储的就是该变量的值 go语言中的引用类型：1234slice，map，channel，interface，func，string等 声明一个引用类型的变量，编译器会把实例的内存分配在堆上string和其他语言一样，是引用类型，string的底层实现struct String &#123; byte* str; intgo len; &#125;; 但是因为string不允许修改，每次操作string只能生成新的对象，所以在看起来使用时像值类型。` go语言中的指针类型：1234一个指针变量指向了一个值的内存地址 当一个指针被定义后没有分配到任何变量时，它的值为 nil。nil 指针也称为空指针 一个指针变量通常缩写为 ptr 其实引用类型可以看作对指针的封装","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"go基本类型","slug":"go基本类型","permalink":"https://itwangmingfei.github.io/tags/go%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"}],"author":"SeeFly"},{"title":"跨域 for go","slug":"跨域-for-go","date":"2020-05-13T12:18:00.000Z","updated":"2020-05-13T12:20:46.568Z","comments":true,"path":"2020/05/13/跨域-for-go/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/13/%E8%B7%A8%E5%9F%9F-for-go/","excerpt":"","text":"跨域请求浏览器同源，解决跨域请求问题1234567891011121314151617181920212223242526package middlewareimport ( \"github.com/gin-gonic/gin\" \"net/http\")func CorsMiddleware() gin.HandlerFunc&#123; return func(ctx *gin.Context) &#123; ctx.Writer.Header().Set(\"Access-Control-Allow-Origin\", \"*\") ctx.Writer.Header().Set(\"Access-Control-Max-Age\", \"86400\") ctx.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"*\") ctx.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, content-Type, Accept, Authorization\") ctx.Writer.Header().Set(\"Access-Control-Allow-Credentials\", \"true\") //放行所有OPTIONS方法 if ctx.Request.Method == http.MethodOptions&#123; ctx.AbortWithStatus(http.StatusNoContent) &#125; // 处理请求 ctx.Next() &#125;&#125;r:= gin.Default()r.Use(middleware.CorsMiddleware())//跨域处理接收数据","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"js","slug":"js","permalink":"https://itwangmingfei.github.io/tags/js/"}],"author":"SeeFly"},{"title":"channel for go","slug":"channel-for-go","date":"2020-05-13T12:01:00.000Z","updated":"2020-05-13T12:25:05.778Z","comments":true,"path":"2020/05/13/channel-for-go/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/13/channel-for-go/","excerpt":"","text":"Channelchannel 是 golang 中最核心的 feature 之一，因此理解 Channel 的原理对于学习和使用 golang 非常重要。channel 是 goroutine 之间通信的一种方式，可以类比成 Unix 中的进程的通信方式管道。channel 提供了一种通信机制，通过它，一个 goroutine 可以想另一 goroutine 发送消息。channel 本身还需关联了一个类型，也就是 channel 可以发送数据的类型。例如: 发送 int 类型消息的 channel 写作 chan int 。channel 定义有缓存和无缓存 唯一区别在于数量控制阻塞123$ var nums chan bool$ nums = make(chan bool) //设置无缓存通道 $ nums = make(chan bool ,3) //设置有缓存的通道 关闭 channelgolang 提供了内置的 close 函数对 channel 进行关闭操作12ch := make(chan int)close(ch) 理解有缓存和无缓存区别12345678910111213141516171819202122232425262728func main() &#123; maxNum := 3 limit := make(chan bool, maxNum) //缓存通道 quit := make(chan bool) //无缓存通道 for i := 0; i &lt; 9; i++ &#123; limit &lt;- true //缓存满3个 产生阻塞 执行下方的 gororutine fmt.Println(\"start worker : \", i) go func(i int) &#123; //执行这个gororutine 从代码上看这个gororutine不会阻塞 //保持这个gororutine 不会阻塞 fmt.Println(\"do worker start: \", i) time.Sleep(time.Millisecond * 200) fmt.Println(\"do worker finish: \", i) res := &lt;- limit // 取出一个chan limit缓存剩余2个，缓存通道开启，继续执行上面的 for 然后会在次阻塞，但是这个里面会继续执行 fmt.Println(res) if i == 8 &#123; quit &lt;- true //存入值 主程序获取到这个值 关闭主程序阻塞 fmt.Println(\"主程序退出\") &#125; &#125;(i) &#125; &lt;-quit //chan读取数据一直读取不到 开启主程序阻塞 fmt.Println(\"收到退出通知，主程序退出\")&#125;","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"channel","slug":"channel","permalink":"https://itwangmingfei.github.io/tags/channel/"}],"author":"SeeFly"},{"title":"bcrypt for go","slug":"bcrypt-for-go","date":"2020-05-13T11:59:00.000Z","updated":"2020-05-14T12:51:27.024Z","comments":true,"path":"2020/05/13/bcrypt-for-go/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/13/bcrypt-for-go/","excerpt":"","text":"golang.org/x/crypto/bcrypt用户密码加密扩展 12345678/*@加密密码*/bpassword,err :=bcrypt.GenerateFromPassword([]byte(password),bcrypt.DefaultCost)/**@验证密码/err:= bcrypt.CompareHashAndPassword([]byte(UserRow.Password),[]byte(password))","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"bcrypt","slug":"bcrypt","permalink":"https://itwangmingfei.github.io/tags/bcrypt/"}],"author":"SeeFly"},{"title":"Linux 贴脸命令","slug":"Linux","date":"2020-05-10T05:49:00.000Z","updated":"2020-05-12T11:52:13.204Z","comments":true,"path":"2020/05/10/Linux/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/10/Linux/","excerpt":"","text":"netstat 查看端口1netstat source 执行配置1source ~/.bash_profile locate 查找文件1yum install mlocate locate 文件ps 常用参数：－auxf12ps -auxf 显示进程状态ps -auxf | grep nginx 123456789rmdir：Remove Directory（删除目录）rm：Remove（删除目录或文件） rm -rf aaa.txtmkdir：Make Directory(创建目录)touch: touch ; touch aa.txtmv: Move file mv aa.txt ./bb/bbb.txtrm: Remove file rm -rf aa.txtcp: Copy file cp aa.txt bb.txtchown: Change owner : chown www:www nginx/chmod: Change mode : chmod -R 777 public/ vim安装使用12345yum install vimvim/serarch:set nu:wq!","categories":[{"name":"linux","slug":"linux","permalink":"https://itwangmingfei.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://itwangmingfei.github.io/tags/linux/"}],"author":"SeeFly"},{"title":"Mysql 常用命令","slug":"Mysql","date":"2020-05-09T13:46:00.000Z","updated":"2020-05-12T12:21:48.070Z","comments":true,"path":"2020/05/09/Mysql/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/09/Mysql/","excerpt":"","text":"myisam 和 innodb 这两个存储引擎的区别1231，myisam：不支持事务，表级别锁，易产生碎片，需要经常优化，适合频繁操作查询的应用。2，innodb：支持事务安全的引擎，支持外键、行锁、事务是他的最大特点。如果有大量的update和insert，建议使用InnoDB，特别是针对多个并发和QPS较高的情况。 连接数据库$ mysql -uroot -p 创建数据库基础操作1234mysql&gt;create database oldboy;mysql&gt;drop database oldboy_gbk；mysql&gt;show create database oldboy\\G mysql&gt; use oldboy； 常规操作123456789101112mysql&gt; select version(); #查看数据库版本mysql&gt; select user(); #查看数据库用户mysql&gt; select now(); #查看当前时间mysql&gt; create database db_name; # 创建数据库mysql&gt; show databases; #显示所有的数据库mysql&gt; drop database db_name; #删除数据库mysql&gt; use db_name; #选择数据库mysql&gt; create table tb_name (字段名 varchar(20), 字段名 char(1)); -- 创建数据表模板mysql&gt; show tables; #显示数据表mysql&gt; desc tb_name； #显示表结构mysql&gt; drop table tb_name； #删除表mysql&gt; select * from table\\G;","categories":[{"name":"mysql","slug":"mysql","permalink":"https://itwangmingfei.github.io/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://itwangmingfei.github.io/tags/mysql/"},{"name":"mysql存储引擎区别","slug":"mysql存储引擎区别","permalink":"https://itwangmingfei.github.io/tags/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%8C%BA%E5%88%AB/"}],"author":"SeeFly"},{"title":"Git 基础命令","slug":"Git","date":"2020-05-09T13:43:00.000Z","updated":"2020-05-10T07:48:20.421Z","comments":true,"path":"2020/05/09/Git/","link":"","permalink":"https://itwangmingfei.github.io/2020/05/09/Git/","excerpt":"","text":"下载clone 12345git clone “git地址”git add . git commit -m \"提交的什么\"git push origin master git设置用户 12345$ git config user.name$ git config user.email$ git config --global user.name \"xxxx\"$ git config --global user.email \"xxxx\" 创建新分支 1git checkout -b 新分支名 查看分支 1git branch 切换分支 1git checkout 分支名 版本回滚某个版本 1git reset --hard 版本号 merge 1git merge branch git 生成密钥 1ssh-keygen -t rsa -C \"账号邮箱\" git 屏蔽已经存在的文件 1Git update-index --assume-unchanged PATH（文件路径）","categories":[{"name":"git","slug":"git","permalink":"https://itwangmingfei.github.io/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://itwangmingfei.github.io/tags/git/"}],"author":"SeeFly"},{"title":"php-method","slug":"php方法","date":"2019-05-29T02:06:00.000Z","updated":"2020-05-16T13:15:35.231Z","comments":true,"path":"2019/05/29/php方法/","link":"","permalink":"https://itwangmingfei.github.io/2019/05/29/php%E6%96%B9%E6%B3%95/","excerpt":"","text":"1，获取链接后缀parse_url basename explode end1234567891011121314&lt;?php//获取后缀$url =\"https://www.yisu.com/reg.php?id=22\";//先切分$res = parse_url($url);var_dump($res);//获取basename$path = basename($res[\"path\"]);var_dump($path);//获取数组$arr = explode(\".\", $path);//获取最后一个元素echo (end($arr));?&gt; 123456789101112131415161718输出结果：array(4) &#123; [\"scheme\"]=&gt; string(5) \"https\" [\"host\"]=&gt; string(12) \"www.yisu.com\" [\"path\"]=&gt; string(8) \"/reg.php\" [\"query\"]=&gt; string(5) \"id=22\"&#125;array(2) &#123; [0]=&gt; string(3) \"reg\" [1]=&gt; string(3) \"php\"&#125;string(3) \"php\" 2，PHP代码确保多个进程同时写入同一个文件成功fopen flock LOCK_EX LOCK_UN fwrite1234567891011121314151617181920212223&lt;?phpecho \"&lt;pre&gt;\"; $handle = fopen(\"est.txt\", \"a+\");// 排它性的锁定if (flock($handle,LOCK_EX))&#123; fwrite($handle,\"W222\"); // release lock flock($handle,LOCK_UN);&#125;else&#123; echo \"Error locking file!\";&#125;fclose($handle);$Reader = fopen(\"est.txt\", \"r\");$content = fread($Reader, filesize(\"est.txt\"));var_dump($content);fclose($Reader)?&gt; 3，创建多级目录mkdir is_dir12345678910111213141516171819&lt;?php//创建多级目录echo \"&lt;pre&gt;\";$path = \"php/php1/php2\";echo $path;function create_dir($path,$mode=0777)&#123; if(is_dir($path))&#123; return \"目录已存在\"; &#125;else&#123; $res = mkdir($path,$mode,true); if($res) &#123; return \"创建成功\"; &#125;else&#123; return \"创建失败\"; &#125; &#125;&#125;$res = create_dir($path);var_dump($res); 4,遍历文件夹opendir readdir is_file12345678910111213141516171819202122232425&lt;?phpecho \"&lt;pre&gt;\";function fileShow($dir)&#123; $handle = opendir($dir); $filelist = array(); while($file = readdir($handle))&#123; if ($file !==\".\" &amp;&amp; $file !==\"..\") &#123; $lfile = $dir.\"/\".$file; if (is_file($lfile))&#123; //表示文件 $filelist[$dir][]=$lfile; &#125;else&#123; //文件夹 $filelist[$dir][]=fileShow($lfile); &#125; &#125; $i++; &#125; closedir($handle); return $filelist;&#125;$list = fileShow('.'); var_dump($list); 5,冒泡算法12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?php$listnums = array(1,23,3,5,32,50);//array(6) &#123; [0]=&gt; int(1) [1]=&gt; int(23) [2]=&gt; int(3) [3]=&gt; int(5) [4]=&gt; int(32) [5]=&gt; int(50) &#125;//从后向前获取值function showArray($listnums)&#123; $lenth = count($listnums); //确定要循环的次数 for ($i=1; $i &lt; $lenth ; $i++) &#123; //$i=1。因为是两两相比所以如果有6个数据需要对比5次 所以 &lt; $lenth for ($j=0; $j &lt; $lenth - $i ; $j++) &#123; //索引取值每一层 最后一个值不要要对比 倒数第二个和它对比 $lenth - $i 也就是5次 索引0-4 //第一次循环 从第一个和第二个对比比 5次对比 获取一个最大值或者最小值 索引 0-4 //第二次循环已经获取到一个我们想要的值， 4次对比 最后一个值不需要对比... 索引 0-3 ， 3次 索引 0-2 ，2次 索引 0-1 ， 1次 出来结果 if ($listnums[$j] &lt; $listnums[$j+1]) &#123; # 将最小的值对比到数组最后面 $t = $listnums[$j+1]; $listnums[$j+1] = $listnums[$j]; $listnums[$j] = $t; &#125; &#125; &#125; return $listnums;&#125;//从前向后获取function showArray2($listnums)&#123; $lenth = count($listnums); //确定要循环的次数 for ($i=0; $i &lt; $lenth; $i++) &#123; for ($j=$i+1; $j &lt; $lenth; $j++) &#123; if($listnums[$i] &lt; $listnums[$j])&#123; $t = $listnums[$j]; $listnums[$j] = $listnums[$i]; $listnums[$i] = $t; &#125; &#125; &#125; return $listnums;&#125;echo \"&lt;pre&gt;\";$newnums = (showArray($listnums));var_dump($newnums); ?&gt; 6, 1234567890abcdefg 倒着输出strrev or while . 连接符号的使用12345678910111213//反转函数1$str = \"1234567890abcdefg\";$newstr = strrev($str);echo $newstr;//=========2$str = '1234567890abcdefg';$newstr = '';$i = 0;while(isset($str[$i]) &amp;&amp; $str[$i]!=null)&#123; $newstr = $str[$i++].$newstr;&#125;echo $newstr;","categories":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"}],"tags":[{"name":"php方法","slug":"php方法","permalink":"https://itwangmingfei.github.io/tags/php%E6%96%B9%E6%B3%95/"}],"author":"SeeFly"},{"title":"Laravel 增删改查","slug":"Laravel-增删改查","date":"2019-05-12T10:15:00.000Z","updated":"2020-05-16T13:12:21.546Z","comments":true,"path":"2019/05/12/Laravel-增删改查/","link":"","permalink":"https://itwangmingfei.github.io/2019/05/12/Laravel-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/","excerpt":"","text":"增删改查https://github.com/itwangmingfei/laravel_model/blob/master/app/Http/Controllers/ViewController.php 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758use \\App\\Userpublic function index()&#123; return view('user');&#125;//添加数据public function add(Request $request)&#123; $input = $request-&gt;except('_token'); $name = $input['name']; $email = $input['email']; $password = md5(time()); User::create(['name'=&gt;$name,'email'=&gt;$email,'password'=&gt;$password]); return redirect('/post/list'); &#125;//获取数据public function get($id)&#123; //查主键第一种 //$row = User::find($id); //条件查询 $row = User::where('id',$id)-&gt;first(); return view(\"show\",['row'=&gt;$row]);&#125;public function save(Request $request)&#123; $input = $request-&gt;except('_token'); $id = $input['id']; $name = $input['name']; $email = $input['email']; //第一种 //$res = User::where('id',$id)-&gt;update(['name'=&gt;$name,'email'=&gt;$email]); //第二种 where('id',$id)-&gt;first() $user = User::find($id); $user-&gt;name = $name; $user-&gt;email = $email; $res = $user-&gt;save(); return redirect('/post/list');&#125;//删除public function delete($id)&#123; //第一种 //$res = user::where('id',$id)-&gt;delete(); //第二种where('id',$id)-&gt;first() $user = User::find($id); if (!empty($user))&#123; $res = $user-&gt;delete(); return redirect('/post/list'); &#125;else&#123; return redirect('/post/list'); &#125;&#125;public function List()&#123; $list = User::orderBy('id','desc')-&gt;paginate(2); return view('list',['list'=&gt;$list]);&#125;","categories":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"},{"name":"laravel","slug":"php/laravel","permalink":"https://itwangmingfei.github.io/categories/php/laravel/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://itwangmingfei.github.io/tags/Laravel/"}],"author":"SeeFly"},{"title":"Laravel router","slug":"Laravel-router","date":"2019-05-12T09:48:00.000Z","updated":"2020-05-16T13:12:49.693Z","comments":true,"path":"2019/05/12/Laravel-router/","link":"","permalink":"https://itwangmingfei.github.io/2019/05/12/Laravel-router/","excerpt":"","text":"构建基本路由只需要一个 URI 与一个 闭包路由文件地址 routes文件夹 包含 api.php channels.php console.php web.phpweb.php123456789101112Route::get('/', function () &#123; return view('welcome');&#125;);方式Route::get($uri, $callback);Route::post($uri, $callback);Route::put($uri, $callback);Route::patch($uri, $callback);Route::match(['请求方式']$uri, $callback);Route::delete($uri, $callback);Route::options($uri, $callback);Route::any($uri, $callback); 根目录打开命令行1php artisan make:controller MyController 系统自动生成 app/Http/Controllers/MyController 1234567891011121314151617181920212223242526//建立方法 public function get()&#123; return \"get\"; &#125; public function post()&#123; return \"post\"; &#125; public function put()&#123; return \"put\"; &#125; public function patch()&#123; return \"patch\"; &#125; public function option()&#123; return \"option\"; &#125; public function delete()&#123; return \"delete\"; &#125; public function match()&#123; return \"match['post','get']\"; &#125; public function any()&#123; return \"any ['all']\"; &#125; 123456789//定义路由 web.phpRoute::get('/user/get','MyController@get');Route::post('/user/post','MyController@post');Route::put('/user/put','MyController@put');Route::patch('/user/patch','MyController@patch');Route::options('/user/option','MyController@option');Route::delete('/user/delete','MyController@delete');Route::match(['get','post'],'/user/match','MyController@match');Route::any('/user/any','MyController@any'); 因为有CSRF保护机制练习前需要关闭保护https://learnku.com/docs/laravel/7.x/csrf/7460 中间件下的 app/Http/Middleware/VerifyCsrfToken.php 12345 protected $except = [ //配置servername 'http://&#123;servername&#125;/user/*', ];&#125; 使用 PostMan请求 redirect 路由重定向123Route::get('log/here','LogController@here');Route::get('log/there','LogController@there');Route::redirect('log/here','/log/there'); view路由视图1Route::view('/view','view',['name'=&gt;'jon']); 视图取值 {{ name }}路由参数 正则验证 {name?}可为空，可设置默认值123Route::get('/get/&#123;id&#125;/&#123;name?&#125;',function($id,$name='tom')&#123; return \"UserID:\".$id.\" Username:\".$name;&#125;); 设置全局正则 匹配 参数 id 必须整数 ‘[0-9]+’ 的正则打开文件 app\\Providers\\RouteServiceProvider.php12345public function boot()&#123; //加入这个限制所有变量参数id 的验证 Route::pattern('id','[0-9]+'); parent::boot();&#125; 行内正则验证 aid123Route::get('/bl/&#123;aid&#125;',function($aid)&#123; return \"UserID:\".$aid;&#125;)-&gt;where('aid','[0-9]+'); 隐式绑定官方例子123Route::get('/user/&#123;user&#125;',function(App\\User $user)&#123; return $user-&gt;name;&#125;); 新建一个表测试一下123456CREATE TABLE `contents` ( `id` int(11) NOT NULL AUTO_INCREMENT, `title` varchar(222) DEFAULT NULL, `content` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=utf8; 创建model1php artisan make:model Content 打开model 设置绑定的条件1234public function getRouteKeyName()&#123; //这个地方可以定义任意contents表的段 return 'id';&#125; 添加路由 ，有数据返回对应值，无数据 返回404123Route::get('/content/&#123;content&#125;',function(App\\Content $content)&#123; return $content-&gt;title;&#125;); 有隐式就有显示显示绑定1234//这里面定义的 $user 对应 Route::get('/user/&#123;user&#125;',function($user)&#123; dd($user-&gt;name);&#125;); RouteServiceProvider.php 通过这里给{user}绑定 \\App\\User123456public function boot()&#123; parent::boot(); //顶一个 user 对应 \\app\\User Route::model('user', \\App\\User::class);&#125;","categories":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"},{"name":"laravel","slug":"php/laravel","permalink":"https://itwangmingfei.github.io/categories/php/laravel/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://itwangmingfei.github.io/tags/Laravel/"}],"author":"SeeFly"},{"title":"php Laravel","slug":"php-Laravel","date":"2019-05-11T02:10:00.000Z","updated":"2020-05-16T13:10:32.563Z","comments":true,"path":"2019/05/11/php-Laravel/","link":"","permalink":"https://itwangmingfei.github.io/2019/05/11/php-Laravel/","excerpt":"","text":"LaravelLaravel是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)。它可以让你从面条一样杂乱的代码中解脱出来； 它可以帮你构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力。 在Laravel中已经具有了一套高级的PHP ActiveRecord实现 -- Eloquent ORM。 它能方便的将“约束（constraints）”应用到关系的双方，这样你就具有了对数据的完全控制，而且享受到ActiveRecord的所有便利。 Eloquent原生支持Fluent中查询构造器（query-builder）的所有方法。安装 composer依赖管理工具123curl -sS https://getcomposer.org/installer | phpsudo mv composer.phar /usr/local/bin/composercomposer --version 切换国内镜像123composer config -g repo.packagist composer https://packagist.phpcomposer.comorcomposer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ 更新 composer：12345678910composer selfupdate# 自动加载 composer require monolog/monolog# 查找composer search monolog# 更新所有依赖composer update# 列出所有已经安装的包composer show 安装 laravel1composer create-project --prefer-dist laravel/laravel &lt;&lt;project&gt;&gt; 安装laravel命令行执行12345composer global require \"laravel/installer=~1.1\"#配置环境变量 ~/.bash_profile~/.composer/vendor/binlaravel new &lt;&lt;project&gt;&gt; 配置nginx 解决访问其他路由404location 中加入 try_files $uri $uri/ /index.php?$query_string; location / { index index.html index.htm index.php; autoindex on; include /usr/local/etc/nginx/conf.d/php-fpm; try_files $uri $uri/ /index.php?$query_string; }修改hostsudo vim /etc/host 127.0.0.1 servername","categories":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"},{"name":"laravel","slug":"php/laravel","permalink":"https://itwangmingfei.github.io/categories/php/laravel/"}],"tags":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/tags/php/"},{"name":"Laravel","slug":"Laravel","permalink":"https://itwangmingfei.github.io/tags/Laravel/"}],"author":"SeeFly"},{"title":"GO环境安装","slug":"GO","date":"2019-05-09T13:42:00.000Z","updated":"2020-05-16T13:15:13.960Z","comments":true,"path":"2019/05/09/GO/","link":"","permalink":"https://itwangmingfei.github.io/2019/05/09/GO/","excerpt":"","text":"Go程序下载https://golang.google.cn/dl/ 1tar -C /usr/local -xzf go1.4.linux-amd64.tar.gz 环境变量export PATH=$PATH:/usr/local/go/bin配置 GO_ROOT GO_PATH12export GOROOT=/usr/local/goexport GOPATH=/Users/yourname/go /Users/yourname/go创建三个文件夹bin pkg src","categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/tags/go/"}],"author":"SeeFly"},{"title":"Nginx for Mac","slug":"Nginx","date":"2019-05-09T13:42:00.000Z","updated":"2020-05-16T13:16:13.198Z","comments":true,"path":"2019/05/09/Nginx/","link":"","permalink":"https://itwangmingfei.github.io/2019/05/09/Nginx/","excerpt":"","text":"1，打开终端2，输入1234brew --updatebrew search nginx //查看nginx是否安装brew info nginx //查看nginx配置 端口 目录 brew install nginx 3,启动nginx1234567sudo nginx //启动sudo nginx -s reload //重启sudo nginx -s stop //停止sudo nginx -t //检测配置文件 4,查看1http://127.0.0.1:8080","categories":[{"name":"nginx","slug":"nginx","permalink":"https://itwangmingfei.github.io/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://itwangmingfei.github.io/tags/nginx/"}],"author":"SeeFly"},{"title":"PHP for Mac +nginx","slug":"PHPmacnginx","date":"2019-05-09T13:35:00.000Z","updated":"2020-05-16T13:11:52.092Z","comments":true,"path":"2019/05/09/PHPmacnginx/","link":"","permalink":"https://itwangmingfei.github.io/2019/05/09/PHPmacnginx/","excerpt":"","text":"查看php文件路径1locate php-fpm /private/etc/php-fpm.conf.default/private/etc/php-fpm.d/www.conf.default 12345sudo cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf// 打开 复制的文件打开并修改路径 error_log = /usr/local/var/log/php-fpm.logsudo cp /private/etc/php-fpm.d/www.conf.default /private/etc/php-fpm.d/www.confsudo killall php-fpm //清除sudo php-fpm -D //重启 关联nginx123456789101112131415161718192021222324vim /usr/local/etc/nginx/nginx.conf===============================直接覆盖events &#123; worker_connections 256;&#125;http &#123; include mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /usr/local/var/log/access.log main; sendfile on; keepalive_timeout 65; port_in_redirect off; include /usr/local/etc/nginx/conf.d/*.conf;&#125; 创建 conf.d12cd /usr/local/etc/nginx/mkdir conf.d 创建文件 php-fpm123456789101112cd conf.dvim php-fpm======================#proxy the php scripts to php-fpmlocation ~ \\.php$ &#123; try_files $uri = 404; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_intercept_errors on; include /usr/local/etc/nginx/fastcgi.conf;&#125; 创建文件 default.conf12345678910111213141516171819202122232425vim default.conf====================server &#123; listen 80; server_name localhost; root 项目路径; access_log /usr/local/var/log/nginx/access.log main; location / &#123; index index.html index.htm index.php; autoindex on; include /usr/local/etc/nginx/conf.d/php-fpm; &#125; location = /info &#123; allow 127.0.0.1; deny all; rewrite (.*) /.info.php; &#125; error_page 404 /404.html; error_page 403 /403.html;&#125;","categories":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/tags/php/"}],"author":"Seefly"}],"categories":[{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/categories/go/"},{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"https://itwangmingfei.github.io/categories/rabbitMQ/"},{"name":"go","slug":"rabbitMQ/go","permalink":"https://itwangmingfei.github.io/categories/rabbitMQ/go/"},{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/categories/php/"},{"name":"Yii","slug":"php/Yii","permalink":"https://itwangmingfei.github.io/categories/php/Yii/"},{"name":"thinkphp","slug":"php/thinkphp","permalink":"https://itwangmingfei.github.io/categories/php/thinkphp/"},{"name":"linux","slug":"linux","permalink":"https://itwangmingfei.github.io/categories/linux/"},{"name":"mysql","slug":"mysql","permalink":"https://itwangmingfei.github.io/categories/mysql/"},{"name":"git","slug":"git","permalink":"https://itwangmingfei.github.io/categories/git/"},{"name":"laravel","slug":"php/laravel","permalink":"https://itwangmingfei.github.io/categories/php/laravel/"},{"name":"nginx","slug":"nginx","permalink":"https://itwangmingfei.github.io/categories/nginx/"}],"tags":[{"name":"Go-maze","slug":"Go-maze","permalink":"https://itwangmingfei.github.io/tags/Go-maze/"},{"name":"rabbitMQ","slug":"rabbitMQ","permalink":"https://itwangmingfei.github.io/tags/rabbitMQ/"},{"name":"yii","slug":"yii","permalink":"https://itwangmingfei.github.io/tags/yii/"},{"name":"thinkphp","slug":"thinkphp","permalink":"https://itwangmingfei.github.io/tags/thinkphp/"},{"name":"jwt-go","slug":"jwt-go","permalink":"https://itwangmingfei.github.io/tags/jwt-go/"},{"name":"gin","slug":"gin","permalink":"https://itwangmingfei.github.io/tags/gin/"},{"name":"gorm","slug":"gorm","permalink":"https://itwangmingfei.github.io/tags/gorm/"},{"name":"Validate","slug":"Validate","permalink":"https://itwangmingfei.github.io/tags/Validate/"},{"name":"go基本类型","slug":"go基本类型","permalink":"https://itwangmingfei.github.io/tags/go%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"},{"name":"js","slug":"js","permalink":"https://itwangmingfei.github.io/tags/js/"},{"name":"channel","slug":"channel","permalink":"https://itwangmingfei.github.io/tags/channel/"},{"name":"bcrypt","slug":"bcrypt","permalink":"https://itwangmingfei.github.io/tags/bcrypt/"},{"name":"linux","slug":"linux","permalink":"https://itwangmingfei.github.io/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"https://itwangmingfei.github.io/tags/mysql/"},{"name":"mysql存储引擎区别","slug":"mysql存储引擎区别","permalink":"https://itwangmingfei.github.io/tags/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%8C%BA%E5%88%AB/"},{"name":"git","slug":"git","permalink":"https://itwangmingfei.github.io/tags/git/"},{"name":"php方法","slug":"php方法","permalink":"https://itwangmingfei.github.io/tags/php%E6%96%B9%E6%B3%95/"},{"name":"Laravel","slug":"Laravel","permalink":"https://itwangmingfei.github.io/tags/Laravel/"},{"name":"php","slug":"php","permalink":"https://itwangmingfei.github.io/tags/php/"},{"name":"go","slug":"go","permalink":"https://itwangmingfei.github.io/tags/go/"},{"name":"nginx","slug":"nginx","permalink":"https://itwangmingfei.github.io/tags/nginx/"}]}